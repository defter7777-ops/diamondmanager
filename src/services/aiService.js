/**
 * AI Service for DiamondManager - Claude Integration
 * Provides intelligent task analysis, goal alignment, and personal productivity optimization
 */

import { getTeamMemberProfile, getTeamSuperpowers } from '../data/teamProfiles';
import profileService from './profileService';

class AIService {
  constructor() {
    // Use backend proxy instead of direct API calls
    this.baseUrl = process.env.REACT_APP_DIAMONDMANAGER_BACKEND_URL || 'https://diamondmanager-backend-production.up.railway.app';
    this.model = 'claude-3-5-sonnet-20241022';
  }

  /**
   * Build comprehensive context for Claude based on user and company data
   */
  async buildClaudeContext(userId, activeTab = 'diamondmakers') {
    try {
      const userProfile = await this.getUserProfile(userId);
      const currentTasks = await this.getUserTasks(userId);
      const companyGoals = await this.getCompanyGoals();
      const teamContext = await this.getTeamContext();

      const contextByTab = {
        diamondmakers: `
          Olet DiamondCoach AI, Diamond Makers -yrityksen teko√§lyavustaja. Puhut suomea ja tunnet yrityksen teknisen tilanteen syv√§llisesti.
          
          DIAMOND MAKERS YRITYKSEN KONTEKSTI:
          - P√Ñ√ÑTAVOITE: ‚Ç¨1,000,000 vuositulot SaaS-ratkaisujen kautta
          - Tiimi: Tommi (CTO), Pete (Lead Dev), Janne (Design), Mikko (Finance), Juhani (Sales)
          - TEKNINEN ARKKITEHTUURI: 5 mikropalvelua + Railway Cloud
          - ‚úÖ SAAVUTUKSIA: Multi-app authentication, complete data isolation
          - KEHITYSTY√ñKALU: Claude Code AI-avusteinen workflow
          
          üéØ STRATEGISET PROJEKTIT:
          1. **KURKIPOTKU.COM** - Jalkapallo-alusta (production)
             ‚Ä¢ SaaS-tuote kehityksess√§
             ‚Ä¢ Kaupallistamispotentiaali: Korkea
             ‚Ä¢ Status: Aktiivinen kehitys
          
          2. **DIAMONDMANAGER** - AI-pohjainen tiimity√∂kalu
             ‚Ä¢ MERKITT√ÑV√Ñ kaupallistamispotentiaali
             ‚Ä¢ Claude integration proof-of-concept
             ‚Ä¢ Status: K√§yt√∂ss√§ sis√§isesti
          
          3. **DiamondShift** - Performance platform (Farmastic Oy)
             ‚Ä¢ Asiakasprojekti tuotannossa
             ‚Ä¢ Revenue stream: Aktiivinen
          
          4. **Banz.Ai** - Live-soccer sovellukset
             ‚Ä¢ Suunnitteluvaihe
             ‚Ä¢ Potentiaalinen skaalautuvuus: Korkea
          
          TEKNINEN TILANNE (Sept 2025):
          ‚Ä¢ MongoDB Atlas: App-scoped collections (users, users_diamondshift, users_diamondmanager)
          ‚Ä¢ Authentication: Multi-tenant JWT tokens, complete data isolation
          ‚Ä¢ Development: WSL2 + Windows, curl.exe testing, Railway auto-deploy
          ‚Ä¢ AI Workflow: TASK.md system + Claude Code assistant
          
          TEHT√ÑV√ÑSI:
          1. **TAVOITTEIDEN SAAVUTTAMINEN** - Priorisoi teht√§vi√§ ‚Ç¨1M tavoitteen mukaisesti
          2. **AI-AVUSTEISTEN TY√ñMENETELMIEN KEHITYS** - Ehdota tehokkaita AI-pohjaisia ty√∂kaluja ja prosesseja
          3. Analysoi ja ehdota parhaita strategioita SaaS-tulojen kasvattamiseksi
          4. Tue tiimin j√§seni√§ heid√§n vahvuuksiensa mukaisissa teht√§viss√§
          5. Optimoi projektien v√§lisi√§ resursseja ja ty√∂njakoa
          6. Seuraa ja raportoi edistymist√§ strategisten tavoitteiden osalta
        `,
        
        omat: `
          Olet DiamondCoach AI, henkil√∂kohtainen produktiivuusavustajasi Diamond Makersissa.
          
          HENKIL√ñKOHTAINEN KONTEKSTI (Omat teht√§v√§t):
          - Nimi: ${userProfile.firstName || 'K√§ytt√§j√§'}
          - Rooli: ${userProfile.role || 'Tiimin j√§sen'}
          - Ty√∂skentelytapa: Keskittynyt ty√∂skentely aamup√§iv√§ll√§, yhteisty√∂ iltap√§iv√§ll√§
          - Aktiiviset henkil√∂kohtaiset teht√§v√§t: ${currentTasks.length} kpl
          
          TEHT√ÑV√ÑSI:
          1. Optimoi henkil√∂kohtaista ty√∂skentely√§ ja aikataulua
          2. Priorisoi teht√§vi√§ strategisen arvon perusteella (1-10)
          3. Ehdota optimaalisia ty√∂skentelyaikoja
          4. Seuraa henkil√∂kohtaista edistymist√§
          5. Anna kannustavaa palautetta saavutuksista
        `,
        
        tavoitteet: `
          Olet DiamondCoach AI, tavoitejohtamisen asiantuntija Diamond Makersissa.
          
          TAVOITTEIDEN KONTEKSTI:
          - Yrityksen p√§√§tavoite: ‚Ç¨1M vuositulot
          - Henkil√∂kohtaiset tavoitteet: ${userProfile.personalGoals?.join(', ') || 'Ei m√§√§ritelty'}
          - Edistyminen: Seurataan aktiivisesti
          
          TEHT√ÑV√ÑSI:
          1. Yhdist√§ henkil√∂kohtaiset tavoitteet yrityksen strategiaan
          2. Mittaa ja seuraa tavoitteiden edistymist√§
          3. Tunnista esteit√§ ja ratkaisuja
          4. Aseta realistisia v√§litavoitteita
          5. Juhli saavutuksia ja motivoi jatkamaan
        `
      };

      return {
        systemPrompt: contextByTab[activeTab] + `
          
          OHJEISTUS:
          1. Vastaa aina suomeksi ja k√§yt√§ emojeja havainnollistamaan
          2. Pid√§ vastaukset ytimekk√§in√§ mutta hy√∂dyllisin√§ (max 200 sanaa)
          3. Anna konkreettisia, toimenpiteisiin johtavia neuvoja
          4. Tue p√§√§t√∂ksentekoa, √§l√§ tee p√§√§t√∂ksi√§ puolesta
          5. Juhli saavutuksia ja kannusta jatkamaan
          6. Olet tiimin j√§sen, ei vain ty√∂kalu - ole empaattinen ja kannustava
          
          SUPERPOWERS-OMINAISUUS:
          - Jos k√§ytt√§j√§ kysyy "Miss√§ [nimi] on hyv√§?" tai "Mitk√§ ovat superpowers?", kerro tiimin j√§senten superpowers
          - Jokaisella tiimin j√§senell√§ on dokumentoidut superpowers: Tommi, Pete, Janne, Mikko, Juhani
          - K√§yt√§ t√§t√§ tietoa suositellaksesi kuka voisi auttaa eri teht√§viss√§
          
          Vastaa aina rakentavasti ja positiivisesti.
        `,
        
        userContext: {
          currentTasks,
          workingPatterns: userProfile.workingPatterns,
          personalGoals: userProfile.personalGoals || []
        },
        
        companyContext: {
          goals: companyGoals,
          teamStatus: teamContext
        }
      };
    } catch (error) {
      console.error('Error building Claude context:', error);
      return this.getDefaultContext();
    }
  }

  /**
   * Send message to Claude with full context
   */
  async sendMessageToClaude(userMessage, userId, activeTab = 'diamondmakers', conversationHistory = []) {
    try {
      console.log('ü§ñ Analyzing message for superpowers inquiry...');
      
      // Check if this is a superpower inquiry first
      const superpowerResponse = await this.handleSuperpowerInquiry(userMessage, userId);
      if (superpowerResponse) {
        console.log('‚úÖ Superpower inquiry detected, returning structured response');
        return {
          type: 'superpowers',
          content: superpowerResponse,
          timestamp: new Date(),
          actions: [
            {
              emoji: 'üîç',
              label: 'Kuka muu on hyv√§?',
              action: 'show-team-superpowers',
              data: {}
            }
          ]
        };
      }

      // Check if this message contains potential tasks
      console.log('üîç Checking for potential tasks...');
      const taskDetection = await this.detectPotentialTasks(userMessage, userId, activeTab);
      if (taskDetection.hasTasks) {
        console.log('üìã Tasks detected, asking for user confirmation');
        return {
          type: 'task-confirmation',
          content: taskDetection.confirmationMessage,
          timestamp: new Date(),
          actions: taskDetection.actions,
          detectedTasks: taskDetection.tasks
        };
      }
      
      console.log('ü§ñ Sending message to Claude API...');
      const context = await this.buildClaudeContext(userId, activeTab);
      
      const messages = [
        {
          role: "system",
          content: context.systemPrompt
        },
        ...conversationHistory,
        {
          role: "user",
          content: userMessage
        }
      ];

      const response = await fetch(this.baseUrl + '/ai/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: this.model,
          max_tokens: 1000,
          temperature: 0.7,
          messages
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Claude API error:', response.status, errorData);
        throw new Error(`Claude API error: ${response.status}`);
      }

      const claudeResponse = await response.json();
      console.log('‚úÖ Claude response received');
      
      // Parse and enhance response with interactive elements
      return this.enhanceClaudeResponse(
        claudeResponse.content[0].text,
        context,
        userId,
        activeTab
      );

    } catch (error) {
      console.error('‚ùå Claude API error:', error);
      return {
        type: 'error',
        content: 'Anteeksi, kohtasin teknisen ongelman Claude API:n kanssa. üîß\n\nTarkista verkkoyhteytesi ja yrit√§ hetken p√§√§st√§ uudelleen.',
        timestamp: new Date(),
        actions: []
      };
    }
  }

  /**
   * Enhance Claude responses with interactive elements
   */
  enhanceClaudeResponse(claudeContent, context, userId, activeTab) {
    const response = {
      type: 'text',
      content: claudeContent,
      timestamp: new Date(),
      actions: []
    };

    // Add contextual actions based on Claude's response and active tab
    if (claudeContent.includes('teht√§v√§') || claudeContent.includes('task')) {
      response.actions.push({
        emoji: '‚ûï',
        label: 'Luo uusi teht√§v√§',
        action: 'create-task',
        data: { suggestion: claudeContent, tab: activeTab }
      });
    }

    if (claudeContent.includes('aikataulu') || claudeContent.includes('schedule') || claudeContent.includes('aika')) {
      response.actions.push({
        emoji: 'üìÖ',
        label: 'Avaa kalenteri',
        action: 'open-calendar',
        data: { tab: activeTab }
      });
    }

    if (claudeContent.includes('analyysi') || claudeContent.includes('tilasto') || claudeContent.includes('mittaa')) {
      response.actions.push({
        emoji: 'üìä',
        label: 'N√§yt√§ tilastot',
        action: 'show-analytics',
        data: { tab: activeTab }
      });
    }

    if (claudeContent.includes('tavoite') || claudeContent.includes('goal')) {
      response.actions.push({
        emoji: 'üéØ',
        label: 'Aseta tavoite',
        action: 'set-goal',
        data: { suggestion: claudeContent, tab: activeTab }
      });
    }

    // Add strategic score if mentioned
    const strategicMatch = claudeContent.match(/(\d+)\/10/);
    if (strategicMatch) {
      response.strategicValue = parseInt(strategicMatch[1]);
    }

    return response;
  }

  /**
   * Get user profile (combines team profiles with personal superpowers)
   */
  async getUserProfile(userId) {
    // Get personal superpowers from profileService
    const personalProfile = profileService.getUserProfile(userId);
    
    // Try to get real team member profile
    const teamProfile = getTeamMemberProfile(userId || 'pete');
    
    if (teamProfile) {
      return {
        firstName: teamProfile.name,
        role: teamProfile.role,
        title: teamProfile.title,
        email: teamProfile.email,
        superpowers: personalProfile?.superpowers || teamProfile.superpowers,
        personalSuperpowers: personalProfile?.superpowers || [],
        teamSuperpowers: teamProfile.superpowers,
        workingPatterns: {
          peakHours: teamProfile.workingStyle.peakHours,
          preferences: teamProfile.workingStyle.preferences,
          communication: teamProfile.workingStyle.communication,
          personalStyle: personalProfile?.workingStyle
        },
        personalGoals: teamProfile.personalGoals,
        expertise: teamProfile.expertise,
        currentFocus: teamProfile.currentFocus,
        fullProfile: teamProfile, // Include complete profile for AI context
        hasPersonalSuperpowers: !!personalProfile?.superpowers
      };
    }
    
    // For non-team members or when team profile not found
    return {
      firstName: personalProfile?.firstName || personalProfile?.name || 'User',
      role: 'Team Member',
      superpowers: personalProfile?.superpowers || [],
      personalSuperpowers: personalProfile?.superpowers || [],
      workingPatterns: {
        peakHours: 'Not defined',
        preferences: personalProfile?.workingStyle || 'Not defined'
      },
      personalGoals: [],
      hasPersonalSuperpowers: !!personalProfile?.superpowers
    };
  }

  /**
   * Get user tasks (based on actual Diamond Makers development)
   */
  async getUserTasks(userId) {
    return [
      {
        id: 1,
        title: 'DiamondManager Claude API integration',
        status: 'completed',
        priority: 'high',
        description: 'Real-time AI responses with Diamond Makers context'
      },
      {
        id: 2,
        title: 'Multi-app authentication system testing',
        status: 'completed', 
        priority: 'high',
        description: 'Data isolation between DiamondShift/Kurkipotku/DiamondManager'
      },
      {
        id: 3,
        title: 'DiamondShift client project optimization',
        status: 'active',
        priority: 'high',
        description: 'Farmastic Oy performance platform development'
      },
      {
        id: 4,
        title: 'Banz.Ai architecture planning',
        status: 'pending',
        priority: 'medium',
        description: 'Live soccer apps with Kurkipotku integration'
      },
      {
        id: 5,
        title: 'Mikropalveluiden skaalaus asiakasprojekteille',
        status: 'pending',
        priority: 'medium',
        description: 'SaaS-tulojen kasvattaminen olemassa olevalla arkkitehtuurilla'
      }
    ];
  }

  /**
   * Get company goals (based on actual Diamond Makers development)
   */
  async getCompanyGoals() {
    return {
      primaryObjective: '‚Ç¨1,000,000 vuositulot - SaaS-pohjaisten ratkaisujen kautta',
      currentPriorities: 'üèÜ KURKIPOTKU.COM development (NRO 1), DiamondManager commercialization, multi-app ecosystem',
      quarterlyGoals: [
        'üèÜ **KURKIPOTKU.COM** - Jalkapallo-alusta kehitys ja dokumentointi (PRIORITEETTI #1)',
        'Janne + tiimi yhteisty√∂n optimointi Kurkipotku UX/UI:ssa',
        'Diamond Coach logiikan testaus ja kehitys Kurkipotku-projektissa',
        'DiamondManager SaaS-tuotteen kaupallistaminen',
        'Multi-app authentication system (‚úÖ COMPLETED)',
        'DiamondShift asiakasprojekti jatkuu (Farmastic Oy)'
      ],
      technicalAchievements: [
        'Kurkipotku.com production-alusta toiminnassa',
        'Mikropalveluarkkitehtuuri (5 backend-palvelua) tukee kaikkia tuotteita',
        'Railway Cloud deployment (100% operational)',
        'Multi-tenant SaaS authentication (data isolation)',
        'AI-assisted development workflow (Claude Code)',
        'DiamondManager Claude integration (proof-of-concept SaaS-tuotteelle)'
      ],
      commercialPotential: {
        kurkipotku: 'Jalkapallo-alusta, production-valmis, Janne aktiivisesti kehitt√§m√§ss√§ UX:√§√§',
        diamondManager: 'AI-pohjainen tiimity√∂kalu, merkitt√§v√§ SaaS-potentiaali, Claude integration',
        technical: 'Skaalautuva mikropalveluarkkitehtuuri tukee molempia tuotteita'
      }
    };
  }

  /**
   * Get team context (based on actual Diamond Makers setup)
   */
  async getTeamContext() {
    const teamSuperpowers = getTeamSuperpowers();
    
    return {
      teamSize: 5,
      teamMembers: {
        'Tommi': 'CEO & CTO - AI-Assisted Development & Strategy',
        'Pete': 'Content Provider - Customer Relations, Testing & Business Development', 
        'Janne': 'Designer - UX/UI & User Experience',
        'Mikko': 'Finance - Business Strategy & Analytics',
        'Juhani': 'Sales - Customer Relations & Growth'
      },
      teamSuperpowers: {
        'Tommi': teamSuperpowers.tommi,
        'Pete': teamSuperpowers.pete, 
        'Janne': teamSuperpowers.janne,
        'Mikko': teamSuperpowers.mikko,
        'Juhani': teamSuperpowers.juhani
      },
      currentProjects: {
        'Kurkipotku': 'üèÜ PRIORITEETTI #1 - Football training platform (production), Janne actively developing UX/UI, Diamond Coach testing',
        'DiamondManager': 'AI-powered team management (Claude integration), SIGNIFICANT commercial SaaS potential',
        'DiamondShift': 'Performance optimization platform (Farmastic Oy client)',
        'Banz.Ai': 'Live soccer apps (planning phase)'
      },
      technicalStack: {
        'Backend': '5 microservices (auth, user, team, challenge, feedback)',
        'Frontend': 'React + TailwindCSS',
        'Database': 'MongoDB Atlas with app-scoped collections',
        'Deployment': 'Railway Cloud (auto-deploy from main)',
        'Development': 'WSL2 + Windows, Claude Code AI assistant',
        'Authentication': 'Multi-app JWT with complete data isolation'
      },
      developmentWorkflow: {
        'AI-Assisted': 'Claude Code for architecture, debugging, testing',
        'Task Management': 'TASK.md system with AI collaboration',
        'Documentation': 'Comprehensive guides following KISS principles',
        'Testing': 'Real data validation, curl.exe testing',
        'Deployment': 'Railway auto-deploy with monitoring'
      },
      recentAchievements: [
        'Multi-app authentication system deployed (Sept 2025)',
        'Complete CORS resolution across all services',
        'Data isolation between DiamondShift/Kurkipotku/DiamondManager',
        'Railway deployment optimization',
        'Comprehensive documentation system'
      ]
    };
  }

  /**
   * Detect potential tasks in user message
   */
  async detectPotentialTasks(message, userId, activeTab) {
    const normalizedMessage = message.toLowerCase();
    
    // Task indicators (Finnish patterns)
    const taskIndicators = [
      'pit√§√§ tehd√§', 't√§ytyy tehd√§', 'tee', 'toteuta', 'luo', 'rakenna', 'korjaa',
      'suunnittele', 'analysoi', 'tutki', 'selvit√§', 'ota yhteytt√§', 'kirjoita',
      'p√§ivit√§', 'lis√§√§', 'poista', 'muuta', 'kehit√§', 'testaa', 'deploy',
      'valmistele', 'j√§rjest√§', 'koordinoi', 'review', 'tarkista'
    ];
    
    // Time indicators
    const timeIndicators = [
      't√§n√§√§n', 'huomenna', 't√§ll√§ viikolla', 'ensi viikolla', 'deadlinena',
      'kiireellinen', 'pian', 'ennen', 'j√§lkeen', 'menness√§'
    ];
    
    // Check for task patterns
    const hasTaskWords = taskIndicators.some(indicator => 
      normalizedMessage.includes(indicator)
    );
    
    const hasTimeReference = timeIndicators.some(indicator => 
      normalizedMessage.includes(indicator)
    );
    
    // Strong task indicators
    const strongTaskPatterns = [
      /pit√§√§ (tehd√§|toteuttaa|rakentaa|korjata|p√§ivitt√§√§)/g,
      /t√§ytyy (tehd√§|hoitaa|saada)/g,
      /voitaisiinko (tehd√§|toteuttaa|lis√§t√§)/g,
      /ehdotan ett√§ (tehd√§√§n|toteutetaan|luodaan)/g,
      /seuraavaksi (teen|teemme|toteutan)/g
    ];
    
    const hasStrongPattern = strongTaskPatterns.some(pattern => 
      pattern.test(normalizedMessage)
    );
    
    if (hasTaskWords || hasTimeReference || hasStrongPattern) {
      // Extract potential tasks using simple text analysis
      const tasks = await this.extractTasksFromMessage(message, userId, activeTab);
      
      if (tasks.length > 0) {
        return {
          hasTasks: true,
          tasks: tasks,
          confirmationMessage: this.generateTaskConfirmationMessage(tasks, message),
          actions: [
            {
              emoji: '‚úÖ',
              label: 'Kyll√§, luo teht√§v√§(t)',
              action: 'create-tasks',
              data: { tasks: tasks }
            },
            {
              emoji: '‚ùå', 
              label: 'Ei, jatka keskustelua',
              action: 'continue-conversation',
              data: { originalMessage: message }
            },
            {
              emoji: '‚úèÔ∏è',
              label: 'Muokkaa ensin',
              action: 'edit-tasks',
              data: { tasks: tasks }
            }
          ]
        };
      }
    }
    
    return { hasTasks: false };
  }

  /**
   * Extract tasks from user message
   */
  async extractTasksFromMessage(message, userId, activeTab) {
    const sentences = message.split(/[.!?]+/).filter(s => s.trim().length > 0);
    const tasks = [];
    
    const taskIndicators = [
      'pit√§√§ tehd√§', 't√§ytyy tehd√§', 'tee', 'toteuta', 'luo', 'rakenna', 'korjaa',
      'suunnittele', 'analysoi', 'tutki', 'selvit√§', 'ota yhteytt√§', 'kirjoita',
      'p√§ivit√§', 'lis√§√§', 'poista', 'muuta', 'kehit√§', 'testaa'
    ];
    
    for (let sentence of sentences) {
      const normalizedSentence = sentence.toLowerCase().trim();
      
      if (taskIndicators.some(indicator => normalizedSentence.includes(indicator))) {
        // Estimate strategic value based on keywords
        let strategicValue = 5; // default
        
        if (normalizedSentence.includes('kurkipotku')) strategicValue = 9;
        else if (normalizedSentence.includes('asiakas') || normalizedSentence.includes('client')) strategicValue = 8;
        else if (normalizedSentence.includes('urgent') || normalizedSentence.includes('kiire')) strategicValue = 7;
        else if (normalizedSentence.includes('bug') || normalizedSentence.includes('korjaa')) strategicValue = 6;
        
        // Extract time context
        let timeContext = 'Ei m√§√§ritelty';
        if (normalizedSentence.includes('t√§n√§√§n')) timeContext = 'T√§n√§√§n';
        else if (normalizedSentence.includes('huomenna')) timeContext = 'Huomenna';
        else if (normalizedSentence.includes('t√§ll√§ viikolla')) timeContext = 'T√§ll√§ viikolla';
        else if (normalizedSentence.includes('ensi viikolla')) timeContext = 'Ensi viikolla';
        
        tasks.push({
          title: this.cleanTaskTitle(sentence.trim()),
          description: sentence.trim(),
          strategicValue: strategicValue,
          estimatedTime: this.estimateTaskTime(sentence),
          timeContext: timeContext,
          category: this.categorizeTask(sentence, activeTab),
          source: 'ai-detected'
        });
      }
    }
    
    return tasks;
  }

  /**
   * Generate confirmation message for detected tasks
   */
  generateTaskConfirmationMessage(tasks, originalMessage) {
    let message = `ü§ñ Tunnistin viestist√§si ${tasks.length} mahdollista teht√§v√§√§:\n\n`;
    
    tasks.forEach((task, index) => {
      message += `**${index + 1}. ${task.title}**\n`;
      message += `   ‚Ä¢ Strateginen arvo: ‚≠ê ${task.strategicValue}/10\n`;
      message += `   ‚Ä¢ Arvioitu aika: ‚è±Ô∏è ${task.estimatedTime}\n`;
      message += `   ‚Ä¢ Aikataulussa: üìÖ ${task.timeContext}\n`;
      message += `   ‚Ä¢ Kategoria: üìÇ ${task.category}\n\n`;
    });
    
    message += `Haluatko ett√§ luon n√§ist√§ teht√§vi√§ Diamond Makers projekteihin? üéØ`;
    
    return message;
  }

  /**
   * Helper methods for task processing
   */
  cleanTaskTitle(sentence) {
    // Remove task indicators and clean up the title
    const cleanSentence = sentence
      .replace(/^(pit√§√§ tehd√§|t√§ytyy tehd√§|tee|toteuta|luo|rakenna|korjaa|suunnittele|analysoi)/gi, '')
      .replace(/^\s*(ett√§\s*)?/gi, '')
      .trim();
    
    // Capitalize first letter
    return cleanSentence.charAt(0).toUpperCase() + cleanSentence.slice(1);
  }

  estimateTaskTime(sentence) {
    const normalizedSentence = sentence.toLowerCase();
    
    if (normalizedSentence.includes('pika') || normalizedSentence.includes('nopea')) return '30 min';
    if (normalizedSentence.includes('review') || normalizedSentence.includes('tarkista')) return '1 tunti';
    if (normalizedSentence.includes('suunnittele') || normalizedSentence.includes('analysoi')) return '2-4 tuntia';
    if (normalizedSentence.includes('toteuta') || normalizedSentence.includes('kehit√§')) return '4-8 tuntia';
    if (normalizedSentence.includes('luo') || normalizedSentence.includes('rakenna')) return '1-2 p√§iv√§√§';
    
    return '2-3 tuntia';
  }

  categorizeTask(sentence, activeTab) {
    const normalizedSentence = sentence.toLowerCase();
    
    if (normalizedSentence.includes('kurkipotku')) return 'Kurkipotku.com (PRIORITEETTI #1)';
    if (normalizedSentence.includes('diamondmanager')) return 'DiamondManager';
    if (normalizedSentence.includes('diamondshift')) return 'DiamondShift (Farmastic)';
    if (normalizedSentence.includes('ui') || normalizedSentence.includes('design')) return 'UX/UI Design';
    if (normalizedSentence.includes('backend') || normalizedSentence.includes('api')) return 'Backend Development';
    if (normalizedSentence.includes('testi') || normalizedSentence.includes('bug')) return 'Testing & QA';
    
    // Default based on active tab
    if (activeTab === 'diamondmakers') return 'Yrityksen strategiset teht√§v√§t';
    if (activeTab === 'omat') return 'Henkil√∂kohtaiset teht√§v√§t';
    if (activeTab === 'tavoitteet') return 'Tavoitteiden seuranta';
    
    return 'Yleinen';
  }

  /**
   * Handle superpower inquiries about team members
   */
  async handleSuperpowerInquiry(question, userId) {
    const teamSuperpowers = getTeamSuperpowers();
    const normalizedQuestion = question.toLowerCase();
    
    // Check if asking about self
    if (normalizedQuestion.includes('miss√§ sin√§ olet hyv√§') || normalizedQuestion.includes('mitk√§ ovat sinun superpowers')) {
      const userProfile = await this.getUserProfile(userId);
      return this.formatSuperpowerResponse(userProfile.firstName, userProfile.superpowers, userProfile);
    }
    
    // Check if asking about specific team member
    const teamMembers = ['tommi', 'pete', 'janne', 'mikko', 'juhani'];
    const mentionedMember = teamMembers.find(name => 
      normalizedQuestion.includes(name.toLowerCase())
    );
    
    if (mentionedMember) {
      const memberProfile = getTeamMemberProfile(mentionedMember);
      return this.formatSuperpowerResponse(memberProfile.name, memberProfile.superpowers, memberProfile);
    }
    
    // General team superpowers overview
    if (normalizedQuestion.includes('kuka on hyv√§') || normalizedQuestion.includes('tiimin superpowers')) {
      return this.formatTeamSuperpowersOverview(teamSuperpowers);
    }
    
    return null; // Not a superpower inquiry
  }

  /**
   * Format individual superpower response
   */
  formatSuperpowerResponse(name, superpowers, profile) {
    let response = `üåü **${name}:n Superpowers:**\n\n`;
    
    superpowers.forEach(power => {
      response += `${power}\n`;
    });
    
    if (profile.currentFocus) {
      response += `\nüéØ **T√§m√§nhetkinen fokus:**\n`;
      profile.currentFocus.forEach(focus => {
        response += `‚Ä¢ ${focus}\n`;
      });
    }
    
    response += `\nüí° **Hy√∂dynn√§ ${name}:n osaamista:**\n`;
    if (name === 'Tommi') {
      response += '‚Ä¢ Strategiset p√§√§t√∂kset ja visiointity√∂\n‚Ä¢ Teknisen arkkitehtuurin suunnittelu\n‚Ä¢ Tiimin koordinointi ja priorisointip√§√§t√∂kset';
    } else if (name === 'Pete') {
      response += '‚Ä¢ Backend-toteutukset ja integraatiot\n‚Ä¢ Teknisten haasteiden ratkaiseminen\n‚Ä¢ Railway deployment ja DevOps';
    } else if (name === 'Janne') {
      response += '‚Ä¢ UX/UI suunnittelu ja k√§ytt√∂kokemus\n‚Ä¢ Kurkipotku.com visuaalinen kehitys\n‚Ä¢ User research ja k√§ytett√§vyys';
    } else if (name === 'Mikko') {
      response += '‚Ä¢ Liiketoimintastrategia ja hinnoittelu\n‚Ä¢ Taloudellinen analyysi ja suunnittelu\n‚Ä¢ Asiakasprojektien kannattavuus';
    } else if (name === 'Juhani') {
      response += '‚Ä¢ Asiakashankinta ja myynti\n‚Ä¢ Customer success ja asiakassuhteet\n‚Ä¢ Markkinointi ja br√§ndin rakentaminen';
    }
    
    return response;
  }

  /**
   * Format team superpowers overview
   */
  formatTeamSuperpowersOverview(teamSuperpowers) {
    let response = `üöÄ **Diamond Makers Tiimin Superpowers:**\n\n`;
    
    Object.entries(teamSuperpowers).forEach(([name, powers]) => {
      const profile = getTeamMemberProfile(name);
      response += `**${profile.name}** (${profile.role}):\n`;
      powers.slice(0, 3).forEach(power => { // Show top 3 superpowers
        response += `  ${power}\n`;
      });
      response += '\n';
    });
    
    response += 'üí° **K√§yt√§ komentoja kuten:** "Miss√§ Janne on hyv√§?" tai "Mitk√§ ovat Tommi:n superpowers?"';
    
    return response;
  }

  /**
   * Default context when real context fails to load
   */
  getDefaultContext() {
    return {
      systemPrompt: `
        Olet DiamondCoach AI, Diamond Makers -yrityksen teko√§lyavustaja. 
        Vastaa suomeksi ja auta k√§ytt√§j√§√§ ty√∂skentelem√§√§n tehokkaammin.
        Keskity teht√§vien priorisoinnin ja tavoitteiden saavuttamisen tukemiseen.
        Pid√§ vastaukset ytimekk√§in√§ ja anna konkreettisia neuvoja.
        
        T√ÑRKE√Ñ OMINAISUUS: Kun k√§ytt√§j√§ kysyy "Miss√§ [nimi] on hyv√§?" tai "Mitk√§ ovat superpowers?", 
        anna yksityiskohtainen listaus tiimin j√§senten superpowers-ominaisuuksista.
      `,
      userContext: { currentTasks: [], workingPatterns: {}, personalGoals: [] },
      companyContext: { goals: {}, teamStatus: {} }
    };
  }
}

// Export singleton instance
const aiService = new AIService();
export default aiService;